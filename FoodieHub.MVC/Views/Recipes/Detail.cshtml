@using FoodieHub.MVC.Models.Recipe
@using FoodieHub.MVC.Service.Interfaces
@inject IConfiguration config
@inject ICommentService commentService
@inject IFavoriteService favoriteService;
@model DetailRecipeDTO
@{
    var url = config["BaseHost"];
    ViewData["Title"] = "Detail";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var comments = await commentService.GetCommentRecipe(Model.RecipeID);

    var listFavorites = await favoriteService.GetFR()?? new List<GetRecipeDTO>();

    var userID = ViewBag.UserID ?? "";
}
@section recipedetail {
    <link rel="stylesheet" href="~/css/RecipeDetail.css" asp-append-version="true">
}

<div class="container-recipedetail">
    <img alt="A plate of winter pasta with brown butter, hazelnuts, and kale" class="main-image" src="@(url + "images/" + Model.ImageURL)" width="800" />
    <div class="main-content">
        <div class="content col-md-8 col-12">
            <div class="title">
                @Model.Title
            </div>
            <p>@Model.CreatedAt.ToString("dd MMM yyyy")</p>

            @{
                var fullStars = (int)Math.Floor(Model.RatingAverage); // Số sao đầy
                var hasHalfStar = Model.RatingAverage % 1 >= 0.5;     // Kiểm tra nửa sao
                var emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0); // Số sao rỗng
            }

            <div class="rating">
                @for (var i = 0; i < fullStars; i++)
                {
                    <i class="fas fa-star"></i>
                }
                @if (hasHalfStar)
                {
                    <i class="fas fa-star-half-alt"></i>
                }
                @for (var i = 0; i < emptyStars; i++)
                {
                    <i class="far fa-star"></i>
                }
                <span>
                    @Model.TotalRatings ratings
                </span>
            </div>
            <div class="actions mt-2">
                <div>
                    @if (listFavorites.Select(x => x.RecipeID).Contains(Model.RecipeID))
                    {
                        <button id="favoriteButton" class="btn btn-outline-secondary" onclick="toggleFavorite(@Model.RecipeID, true)">
                            <i class="fas fa-bookmark"></i> UnSave
                        </button>
                    }
                    else
                    {
                        <button id="favoriteButton" class="btn btn-outline-secondary" onclick="toggleFavorite(@Model.RecipeID, false)">
                            <i class="far fa-bookmark"></i> Save
                        </button>
                    }
                </div>
            </div>
            <div class="profile">
                @if (Model.Avatar != null)
                {
                    <img src="@($"{url}images/{Model.Avatar}")" alt="User Image" class="rounded-circle me-3" style="width:40px;height:40px; object-fit: cover;">
                }
                else
                {
                    <img src="/images/profile.jpg" alt="User Image" class="rounded-circle me-3" style="width:50px;height:50px">
                }
                <div class="profile-info">
                    <h2>
                        @Model.FullName
                    </h2>
                    
                </div>
                @if (Model.UserID != userID)
                {
                    <a href=@("/account/userinfo/"+Model.UserID) class="btn btn-outline-secondary ms-auto">View Profile</a>
                }
            </div>
            <div class="description-recipe">
                <p class="description">
                    @Html.Raw(Model.Description)
                </p>
                <div class="read-less">
                    Read more
                </div>
                <div class="details">
                    <div>
                        <p class="label">
                            Preparation
                        </p>
                        <p class="value">
                            @Model.CookTime.ToString("HH:mm") min
                        </p>
                    </div>
                    <div>
                        <p class="label">
                            Servings
                        </p>
                        <p class="value">
                            @Model.Serves
                        </p>
                    </div>
                </div>
            </div>
            <div class="ingredients-container">
                <div class="servings">
                    <button id="decreaseServings" class="btn btn-outline-secondary">-</button>
                    <span id="servingsValue">@Model.Serves</span>
                    <button id="increaseServings" class="btn btn-outline-secondary">+</button>
                    <span class="label">Servings</span>
                </div>

                <div class="ingredients" id="ingredientsList">
                    @foreach (var ingredient in Model.Ingredients)
                    {
                        var hasProductID = ingredient.ProductID.HasValue;
                        <div class="ingredient-item">
                            <span class="ingredient-quantity" data-base-quantity="@ingredient.Quantity" data-unit="@ingredient.Unit">
                                @ingredient.Quantity @ingredient.Unit
                            </span>
                            <span class="ingredient-name @(hasProductID ? "" : "text-black")" onclick="searchProduct('@ingredient.Name')" style="cursor: pointer;">
                                @ingredient.Name
                            </span>
                        </div>
                    }
                </div>
                <div class="button-container">
                    <a class="button button-dark" asp-controller="Cart" asp-action="AddRecipeItemsToCart" asp-route-id="@Model.RecipeID">
                        <i class="fas fa-shopping-cart"></i>
                        Add to the shopping list
                    </a>
                </div>
                <div class="divider"></div>
            </div>

            <div class="steps-container">
                @foreach (var item in Model.Steps.Select((value, index) => new { value, index }))
                {
                    <div class="step-title">
                        Step @(@item.index + 1)
                    </div>
                    <div class="row">
                        @if (!string.IsNullOrEmpty(item.value.ImageURL))
                        {
                            <div class="image-container">
                                <img src="@(url + "images/" + item.value.ImageURL)" class="img-fluid mb-2 rounded shadow-sm " alt="Step Image" height="400" width="600">
                            </div>
                            <div>
                                <p>@Html.Raw(item.value.Directions)</p>
                            </div>
                            
                        }
                        else
                        {
                            <div>
                                <p>@Html.Raw(item.value.Directions)</p>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
        <div class="more-delicious col-md-4 col-12">
            <div class="more-delicious-title">
                More delicious ideas for you
            </div>

            <!-- Phần more-delicious chia cột -->
            <div class="more-delicious-items">
                @if (ViewBag.RelatedRecipes != null && ViewBag.RelatedRecipes.Count > 0)
                {
                    foreach (var recipe in ViewBag.RelatedRecipes)
                    {
                        <a class="more-delicious-item" href="@Url.Action("Detail", "Recipes", new { id = recipe.RecipeID })">
                            <div class="time-label">
                                <i class="far fa-clock"></i> @recipe.CookTime.ToString("HH:mm") min
                            </div>
                            <img alt="@recipe.Title" src="@(url + "images/" + recipe.ImageURL)" />
                            <div class="item-title">@recipe.Title</div>
                        </a>
                    }
                }
                else
                {
                    <p>No related recipes found.</p>
                }
            </div>
        </div>
    </div>
    <div>
        <h2 class="ms-2">
            More delicious ideas for you
        </h2>
        @if (ViewBag.RelatedRecipes != null)
        {
            <div id="carouselExampleControlsNoTouching" class="carousel slide" data-bs-touch="false" data-bs-interval="false">
                <div class="carousel-inner">
                    @for (int i = 0; i < ViewBag.RelatedRecipes.Count; i += 4)
                    {
                        <div class="carousel-item @(i == 0 ? "active" : "")">
                            <div class="row">
                                @for (int j = i; j < i + 4 && j < ViewBag.RelatedRecipes.Count; j++)
                                {
                                    var recipe = ViewBag.RelatedRecipes[j];
                                    <div class="mt-3 col-6 col-sm-3 col-lg-3 col-md-3">
                                        <div class="card-more-delicious-item">
                                            <a href="@Url.Action("Detail", "Recipes", new { id = recipe.RecipeID })">
                                                <div class="card-more-delicious-item-content">
                                                    <img class="img-fluid" alt="@recipe.Title" src="@(url + "images/" + recipe.ImageURL)" />
                                                    <div class="badges">
                                                        <span class="badge time">
                                                            <i class="far fa-clock"></i> @recipe.CookTime.ToString("HH:mm") min
                                                        </span>
                                                        <span class="badge catename">
                                                            @recipe.CategoryName
                                                        </span>
                                                    </div>
                                                    <div class="favorite">
                                                        <i class="fas fa-heart"></i> @recipe.TotalFavorites
                                                    </div>
                                                </div>
                                                <h3>@recipe.Title</h3>
                                            </a>
                                            <div class="card-more-delicious-item-footer">
                                                <div class="author">
                                                    <img alt="avatar" src="@($"{url}images/{recipe.Avatar}")" class="rounded-circle" style="object-fit: cover;" />
                                                    <span>@recipe.FullName</span>
                                                </div>
                                                <div class="rating">
                                                    <span>@recipe.RatingAverage</span>
                                                    <i class="fas fa-star ms-1"></i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleControlsNoTouching" data-bs-slide="prev" style="width: 5%">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleControlsNoTouching" data-bs-slide="next" style="width: 5%">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>
            </div>
        }
        else
        {
            <span> </span>
        }
    </div>
    <hr class="my-5">

    <!-- Reviews Section -->
    <div id="reviews" class="m-3">
        <div class="text-center">
            <span class="rating-text" id="ratingText">Hover over the stars to rate</span>
        </div>
        <div class="d-flex star-rating justify-content-center">
            <a href="@Url.Action("Rating", "Recipes", new { recipeID = Model.RecipeID, ratingValue = 1 })" class="star" data-value="1">★</a>
            <a href="@Url.Action("Rating", "Recipes", new { recipeID = Model.RecipeID, ratingValue = 2 })" class="star" data-value="2">★</a>
            <a href="@Url.Action("Rating", "Recipes", new { recipeID = Model.RecipeID, ratingValue = 3 })" class="star" data-value="3">★</a>
            <a href="@Url.Action("Rating", "Recipes", new { recipeID = Model.RecipeID, ratingValue = 4 })" class="star" data-value="4">★</a>
            <a href="@Url.Action("Rating", "Recipes", new { recipeID = Model.RecipeID, ratingValue = 5 })" class="star" data-value="5">★</a>
        </div>


        <!-- Create Comment Form -->
        <form id="createCommentForm" method="post" class="mb-4">
            <div class="d-flex justify-content-between">
                <h5>REVIEWS (@comments.Count())</h5>
                <button type="submit" class="button button-dark">Submit Review</button>
            </div>
            <input type="hidden" name="RecipeID" value="@Model.RecipeID" />
            <textarea name="CommentContent" required class="form-control me-2" rows="2" placeholder="Enter a Review"></textarea>
        </form>

        <!-- Comments List -->
        <div id="commentsList" style="overflow: auto; max-height: 500px;">
            @foreach (var comment in comments)
            {
                <div class="d-flex align-items-center mb-4 bg-light p-3 rounded shadow-sm position-relative">
                    @if (comment.Avatar != null)
                    {
                        <img src="@($"{url}images/{comment.Avatar}")" alt="Avatar" class="rounded-circle me-3" style="width:30px;height:30px; object-fit: cover;">
                    }
                    else
                    {
                        <img src="/images/profile.jpg" alt="Avatar" class="rounded-circle me-3" style="width:30px;height:30px">
                    }
                    <div>
                        <p class="mb-1"><strong>@comment.FullName</strong> - @comment.CommentedAt.ToString("dd/MM/yyyy HH:mm:ss")</p>
                        <p class="mb-0">@comment.CommentContent</p>
                    </div>

                    @if (comment.UserID == userID)
                    {
                        <!-- Dropdown menu for Edit and Delete -->
                        <div class="dropdown ms-auto position-absolute top-0 end-0 me-3">
                            <button class="btn btn-light btn-sm dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fa-solid fa-ellipsis-vertical"></i><!-- Bootstrap icon for three dots -->
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                <li>
                                    <button class="dropdown-item" onclick="openEditModal('@comment.CommentID', '@comment.CommentContent',@Model.RecipeID)">Edit</button>
                                </li>
                                <li>
                                    <a class="dropdown-item text-danger" asp-action="DeleteComment" asp-route-recipeID="@Model.RecipeID" asp-route-id="@comment.CommentID">Delete</a>
                                </li>
                            </ul>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>


@* <!-- Modal --> *@
<div class="modal fade" id="editCommentModal" tabindex="-1" aria-labelledby="editCommentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editCommentModalLabel">Edit Comment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" asp-action="EditComment" id="editCommentForm">
                    <input type="hidden" name="CommentID" id="editCommentID">
                    <input type="hidden" name="RecipeID" id="recipeID">
                    <div class="form-group">
                        <label for="editCommentContent">Comment</label>
                        <textarea required class="form-control" name="CommentContent" id="editCommentContent" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-primary" form="editCommentForm">Save</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
<script>
    function openEditModal(commentID, commentContent,recipeID) {
        // Set values in the modal
        document.getElementById('editCommentID').value = commentID;
        document.getElementById('editCommentContent').value = commentContent;
        document.getElementById('recipeID').value = recipeID;

        // Show the modal
        var editModal = new bootstrap.Modal(document.getElementById('editCommentModal'));
        editModal.show();
    }



    const stars = document.querySelectorAll('.star');
    let selectedRating = 0;  // Lưu giá trị rating khi click

    // Hàm tô sáng các sao dựa trên rating
    function highlightStars(rating) {
        stars.forEach(star => {
            if (parseInt(star.getAttribute('data-value')) <= rating) {
                star.classList.add('selected'); // Thêm class 'selected' cho các sao nhỏ hơn hoặc bằng rating
            } else {
                star.classList.remove('selected'); // Bỏ class 'selected' cho các sao lớn hơn rating
            }
        });
    }

    // Xử lý sự kiện hover trên các sao
    stars.forEach(star => {
        star.addEventListener('mouseover', function () {
            const rating = this.getAttribute('data-value');
            highlightStars(rating); // Tô sáng các sao khi hover
            document.getElementById('ratingText').textContent = `Rate ${rating} stars`; // Hiển thị văn bản khi hover
        });

        // Xử lý khi hover ra ngoài
        star.addEventListener('mouseout', function () {
            highlightStars(selectedRating); // Quay lại trạng thái rating đã chọn khi hover ra ngoài
            if (selectedRating === 0) {
                document.getElementById('ratingText').textContent = 'Hover over the stars to rate'; // Văn bản mặc định
            }
        });

        // Xử lý khi click vào sao
        star.addEventListener('click', function () {
            selectedRating = this.getAttribute('data-value');  // Gán rating đã chọn khi click
            highlightStars(selectedRating);  // Tô sáng các sao dựa trên rating đã chọn
            document.getElementById('ratingText').textContent = `You rated ${selectedRating} stars`; // Cập nhật văn bản khi click
        });
    });


    document.addEventListener('DOMContentLoaded', () => {
        const decreaseButton = document.getElementById('decreaseServings');
        const increaseButton = document.getElementById('increaseServings');
        const servingsValue = document.getElementById('servingsValue');
        const ingredientsList = document.getElementById('ingredientsList');

        let currentServings = parseInt(servingsValue.textContent);
        const baseServings = currentServings;

        const updateIngredients = () => {
            const ingredientItems = ingredientsList.querySelectorAll('.ingredient-item');

            ingredientItems.forEach(item => {
                const quantityElement = item.querySelector('.ingredient-quantity');
                const baseQuantity = parseFloat(quantityElement.getAttribute('data-base-quantity'));
                const unit = quantityElement.getAttribute('data-unit');
                const newQuantity = (baseQuantity / baseServings) * currentServings;
                quantityElement.textContent = `${newQuantity.toFixed(2)} ${unit}`;
            });
        };

        decreaseButton.addEventListener('click', () => {
            if (currentServings > 1) {
                currentServings--;
                servingsValue.textContent = currentServings;
                updateIngredients();
            }
        });

        increaseButton.addEventListener('click', () => {
            currentServings++;
            servingsValue.textContent = currentServings;
            updateIngredients();
        });
    });
    function searchProduct(name) {
        if (!name) {
            alert('Ingredient name not found.');
            return;
        }

        // Chuyển hướng đến controller
        window.location.href = `/Products?searchName=${encodeURIComponent(name)}`;
    }

    document.querySelector('.read-less').addEventListener('click', function () {
        const description = document.querySelector('.description');
        if (description.classList.contains('expanded')) {
            description.classList.remove('expanded');
            this.textContent = 'Read more';
        } else {
            description.classList.add('expanded');
            this.textContent = 'Read less';
        }
    });

    function toggleFavorite(recipeID, isFavorite) {
        const url = isFavorite ? '@Url.Action("UnFavorite", "Recipes")' : '@Url.Action("Favorite", "Recipes")';
        const button = document.getElementById('favoriteButton');

        fetch(`${url}/${recipeID}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                button.innerHTML = isFavorite ? '<i class="far fa-bookmark"></i> Save' : '<i class="fas fa-bookmark"></i> UnSave';
                button.setAttribute('onclick', `toggleFavorite(${recipeID}, ${!isFavorite})`);
            }
            showNotification(data.message, data.notificationType);
        })
        .catch(error => console.error('Error:', error));
    }

    function showNotification(message, type) {
        const notyf = new Notyf({
            duration: 5000, // Thời gian hiển thị thông báo
            dismissible: true, // Cho phép đóng thông báo
            position: {
                x: 'right',
                y: 'top'
            },
            ripple: true // Hiệu ứng khi click vào thông báo
        });
        if (type === 'success') {
            notyf.success(message);
        } else if (type === 'error') {
            notyf.error(message);
        }
    }

    const baseUrl = '@url';

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/commentHub")
        .build();

    connection.on("ReceiveComment", function (message, avatar, fullName) {
        const commentsList = document.getElementById('commentsList');
        const commentElement = document.createElement('div');
        commentElement.classList.add('d-flex', 'align-items-center', 'mb-4', 'bg-light', 'p-3', 'rounded', 'shadow-sm', 'position-relative');

        const avatarElement = document.createElement('img');
        avatarElement.src = avatar ? `${baseUrl}images/${avatar}` : '/images/profile.jpg';
        avatarElement.alt = 'Avatar';
        avatarElement.classList.add('rounded-circle', 'me-3');
        avatarElement.style.width = '30px';
        avatarElement.style.height = '30px';
        avatarElement.style.objectFit = 'cover';

        const commentContentElement = document.createElement('div');
        const commentHeader = document.createElement('p');
        commentHeader.classList.add('mb-1');
        commentHeader.innerHTML = `<strong>${fullName}</strong> - ${new Date().toLocaleString()}`;
        const commentText = document.createElement('p');
        commentText.classList.add('mb-0');
        commentText.textContent = message;

        commentContentElement.appendChild(commentHeader);
        commentContentElement.appendChild(commentText);

        commentElement.appendChild(avatarElement);
        commentElement.appendChild(commentContentElement);

        commentsList.prepend(commentElement); // Thêm bình luận mới vào đầu danh sách
    });

    connection.start().catch(function (err) {
        return console.error(err.toString());
    });

    document.getElementById('createCommentForm').addEventListener('submit', function (event) {
        event.preventDefault(); // Prevent the default form submission

        const form = event.target;
        const formData = new FormData(form);
        const url = '@Url.Action("CreateComment", "Recipes")';

        fetch(url, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Handle success (e.g., update the comments list, show a notification)
                showNotification(data.message, 'success');
                // Optionally, you can reset the form or update the comments list dynamically
                form.reset();
            } else {
                // Handle error
                showNotification(data.message, 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showNotification('An error occurred while submitting the comment', 'error');
        });
    });
</script>
